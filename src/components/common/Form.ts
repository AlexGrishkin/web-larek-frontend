import { IEvents, IFormState } from '../../types';
import { ensureElement } from '../../utils/utils';
import { Component } from '../base/Component';

export class Form<T> extends Component<IFormState> {
	protected _submit: HTMLButtonElement;
	protected _errors: HTMLElement;

	constructor(protected container: HTMLFormElement, protected events: IEvents) {
		super(container);

		//Мы здесь указываем в качестве второго параметра this.container а не просто container. Это позволит нам искать кнопку именно внутри контейнера в котором она находится а не во всем документе.
		//Передавая this.container в качестве контекста, мы ограничиваем поиск элемента только внутри этого элемента, что обычно является предпочтительным поведением. Это позволяет избежать случайного обнаружения других элементов с теми же селекторами на странице.
		//В методе ensureElement используется функция ensureAllElements, которая выполняет поиск всех элементов, соответствующих переданному селектору, внутри указанного контекста.
		//Когда элементы найдены с помощью ensureAllElements, метод ensureElement проверяет, найден ли хотя бы один элемент.
		// Если элемент найден, метод возвращает этот элемент.
		// При этом, если найдено более одного элемента, выдается предупреждение, и возвращается только последний найденный элемент.
		this._submit = ensureElement<HTMLButtonElement>(
			`button[type=submit]`,
			this.container
		);

		this._errors = ensureElement<HTMLElement>('.form__errors', this.container);
		//При инициализации сразу приcваиваем форме обработчик с событием input потому что вводим данные в поля формы
		//отслеживаем таргет пользователя, однако TypeScript не знает, какого типа этот элемент, поскольку target может быть любым типом EventTarget.
		//Чтобы сообщить TypeScript о конкретном типе элемента, мы используем оператор as, чтобы явно указать, что e.target является HTMLInputElement. Это позволяет TypeScript обрабатывать target как элемент типа HTMLInputElement и получать доступ к его свойствам и методам без выдачи ошибок на этапе компиляции.
		//Приводим атрибут name поля к типу данных T(например IDeliveryForm)
		//Получаем значение(введенное) поля
		//Генерируем событие и уведомляем всех подписчиков об изменениях
		this.container.addEventListener('input', (e: Event) => {
			const target = e.target as HTMLInputElement;
			const field = target.name as keyof T;
			const value = target.value;
			this.onInputChange(field, value);
		});

		//При инициализации сразу присваем нашему контейнеру(форме) тип события submit - отправка формы.
		//При срабатывании события убирается стандартное поведение перезагрузки страницы, затем генерируется событие которое уведомляет подписчиков, что форма отправлена
		//Здесь не передаются данные в метод emit, потому что это делается в момент возникновения события, а не в момент создания экземпляра класса.
		this.container.addEventListener('submit', (e: Event) => {
			e.preventDefault();
			this.events.emit(`${this.container.name}:submit`);
		});
	}

	//Передаем в метод ключ(свойство) объекта отвечающего за свою форму (например за форму доставки) и значение которое представляет собой новое значение поля
	//Далее генерируется событие. В качестве параметров идет имя события которое состоит из имени формы в которой работаем и поля которое заполняется, вторым параметром передаем объект с свойствами field и value. После передачи параметров в метод этим свойствам будут присовены соответствующие значения например {"field": "address", "value": "123 Main Street"}
	protected onInputChange(field: keyof T, value: string) {
		this.events.emit(`${this.container.name}.${String(field)}:change`, {
			field,
			value,
		});
	}

	//Устанавливает состояние кнопки отправки формы (_submit). Если value равно true, кнопка становится активной (не заблокированной), иначе - заблокированной.
	set valid(value: boolean) {
		this._submit.disabled = !value;
	}
	//Устанавливает текст для отображения ошибок в форме.
	set errors(value: string) {
		this.setText(this._errors, value);
	}

	//Передаем сюда объект совмещающий частично свойства соответствующей формы (например IDeliveryForm) и свойства IFormState отвечающий за состояние формы (валидация и ошибки)
	render(state: Partial<T> & IFormState) {
		//Деструктурируем объект state, cвойства valid и errors извлекаются напрямую, а остальные свойства помещаются в объект inputs
		const { valid, errors, ...inputs } = state;
		//Здесь вызывается метод render у родительского класса с объектом, содержащим только данные о валидности и ошибках. Этот вызов используется для обновления части интерфейса, которая отображает информацию о валидности и ошибках формы. Он обновляет только часть интерфейса, связанную с состоянием формы, вместо того, чтобы перерисовывать весь компонент.
		super.render({ valid, errors });
		//Копируем в наш экземпляр класса остальные свойства из объекта inputs
		Object.assign(this, inputs);
		//Возвращаем контейнер со всеми свойствами для обновления пользовательского интерфейса
		return this.container;
	}
}
